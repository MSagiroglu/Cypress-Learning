import type { DriverTarget, Target, Eyes, CheckSettings, CheckResult } from './types';
import type { Eyes as BaseEyes } from '@applitools/core-base';
import { type Renderer } from '@applitools/ufg-client';
import { type AbortSignal } from 'abort-controller';
import { type Logger } from '@applitools/logger';
import { type SpecType, type SpecDriver } from '@applitools/driver';
type Options<TSpec extends SpecType> = {
    eyes: Eyes<TSpec>;
    storage: Map<string, Promise<{
        renderer: Renderer;
        eyes: BaseEyes;
    }>[]>;
    target?: DriverTarget<TSpec>;
    spec?: SpecDriver<TSpec>;
    signal?: AbortSignal;
    logger: Logger;
};
export declare function makeCheck<TSpec extends SpecType>({ eyes, storage, target: defaultTarget, spec, signal, logger: mainLogger, }: Options<TSpec>): ({ target, settings, logger, }?: {
    settings?: CheckSettings<TSpec> | undefined;
    target?: Target<TSpec> | undefined;
    logger?: Logger | undefined;
}) => Promise<CheckResult[]>;
export {};
